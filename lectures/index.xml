<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lectures on COMP6[84]45 Slides</title><link>/lectures/</link><description>Recent content in Lectures on COMP6[84]45 Slides</description><generator>Hugo</generator><language>en-au</language><atom:link href="/lectures/index.xml" rel="self" type="application/rss+xml"/><item><title>9: protections</title><link>/lectures/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/lectures/9/</guid><description>&lt;section data-noprocess data-shortcode-slide
 class="center">
 
&lt;h2 id="client-side-mitigations">client-side mitigations&lt;/h2>
&lt;h3 id="6443-week9">6443 week9&lt;/h3>
&lt;hr>
&lt;h3 id="pre-amble-reports">pre-amble: reports&lt;/h3>
&lt;ul>
&lt;li>slides are up on webcms&lt;/li>
&lt;li>demos are at &lt;a href="https://github.com/lachlan-waugh/6443">github.com/lachlan-waugh/6443&lt;/a>
&lt;ul>
&lt;li>go into demos/lectures and theres setup instructiong&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h3 id="origin">Origin&lt;/h3>
&lt;blockquote>
&lt;p>&lt;span style="color: #021691">https://&lt;/span>&lt;span style="color: #fffacd">www.example.com&lt;/span>&lt;span style="color: #7FFFD4">:80&lt;/span>&lt;/p>&lt;/blockquote>
&lt;p>origin = &lt;span style="color: #021691">scheme&lt;/span> + &lt;span style="color: #fffacd">host&lt;/span> + &lt;span style="color: #7FFFD4">port&lt;/span>&lt;/p>
&lt;hr>
&lt;h3 id="site">Site&lt;/h3>
&lt;blockquote>
&lt;p>&lt;span style="color: #021691">http://&lt;/span>&lt;span style="color: #A52A2A">www.&lt;/span>&lt;u>&lt;span style="color: #fffacd">example&lt;/span>&lt;span style="color: #D2691E">.com&lt;/span>&lt;/u>&lt;span style="color: #7FFFD4">:80&lt;/span>&lt;br>
&lt;span style="color: #021691">https://&lt;/span>&lt;span style="color: #A52A2A">api.&lt;/span>&lt;u>&lt;span style="color: #fffacd">example&lt;/span>&lt;span style="color: #D2691E">.com&lt;/span>&lt;/u>&lt;span style="color: #7FFFD4">:443&lt;/span>&lt;/p>&lt;/blockquote>
&lt;p>site = &lt;span style="color: #fffacd">private_domain&lt;/span> + &lt;span style="color: #D2691E">public_suffix&lt;/span>&lt;/p>
&lt;ul>
&lt;li>&lt;s>&lt;span style="color: #021691">scheme&lt;/span>, &lt;span style="color: #A52A2A">subdomain&lt;/span> and &lt;span style="color: #7FFFD4">port&lt;/span>&lt;/s>&lt;/li>
&lt;/ul>

&lt;/section>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h2 id="sop-same-origin-policy">SOP (Same Origin Policy)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>blocks resource requests to/from an &lt;em>external&lt;/em> site&lt;/p></description></item><item><title>x4 nosql/orm</title><link>/lectures/4e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/lectures/4e/</guid><description>&lt;h2 id="well-get-started-at-2005-">We&amp;rsquo;ll get started at 20:05 (???)&lt;/h2>
&lt;hr>

&lt;section data-noprocess data-shortcode-slide
 class="center">
 
&lt;h2 id="further-database-exploitation">further database exploitation&lt;/h2>
&lt;h3 id="6843-week4">6843 week4&lt;/h3>
&lt;hr>
&lt;h2 id="i-think-therefore-i-shill">I think therefore I shill&lt;/h2>
&lt;ul>
&lt;li>do COMP6447&lt;/li>
&lt;li>use GCP&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="overview">overview&lt;/h3>
&lt;ul>
&lt;li>orm injection&lt;/li>
&lt;li>nosql injection&lt;/li>
&lt;/ul>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h2 id="orm">ORM&lt;/h2>
&lt;ul>
&lt;li>object-relational model&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="what-is-an-orm">what is an ORM&lt;/h3>
&lt;ul>
&lt;li>an abstraction&lt;/li>
&lt;li>allows you to interact with a database as if they were a library&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="how-do-they-work">how do they work&lt;/h3>
&lt;ul>
&lt;li>you define models representing database tables&lt;/li>
&lt;li>under the hood all of these function calls will just generate SQL queries for you&lt;/li>
&lt;li>essentially just prepared statements lol, but more confusing&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="example">example&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>cursor &lt;span style="color:#f92672">=&lt;/span> sqlite3&lt;span style="color:#f92672">.&lt;/span>connect(&lt;span style="color:#e6db74">&amp;#34;example.db&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>cursor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cursor&lt;span style="color:#f92672">.&lt;/span>execute(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM users WHERE age &amp;gt; ?&amp;#34;&lt;/span>, (&lt;span style="color:#ae81ff">30&lt;/span>,))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rows &lt;span style="color:#f92672">=&lt;/span> cursor&lt;span style="color:#f92672">.&lt;/span>fetchall()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>(Base):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __tablename__ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id &lt;span style="color:#f92672">=&lt;/span> Column(Integer, primary_key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> Column(String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> age &lt;span style="color:#f92672">=&lt;/span> Column(Integer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session &lt;span style="color:#f92672">=&lt;/span> sessionmaker(bind&lt;span style="color:#f92672">=&lt;/span>create_engine(&lt;span style="color:#e6db74">&amp;#34;sqlite:///example.db&amp;#34;&lt;/span>))()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users &lt;span style="color:#f92672">=&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>query(User)&lt;span style="color:#f92672">.&lt;/span>filter(User&lt;span style="color:#f92672">.&lt;/span>age &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>all()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h2 id="aside-abstraction-bad">aside: abstraction bad&lt;/h2>
&lt;ul>
&lt;li>there&amp;rsquo;s now so many layers of code between the programmer and the computer&lt;/li>
&lt;/ul>

&lt;/section>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h3 id="what-is-the-vulnerability-here">what is the vulnerability here&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>query &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM users WHERE id = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>user_input&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session&lt;span style="color:#f92672">.&lt;/span>execute(query)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="how-to-fix">how to fix?&lt;/h3>
&lt;p>yeah, basic sqli&lt;/p></description></item><item><title>x5 deserialization and pp</title><link>/lectures/5e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/lectures/5e/</guid><description>&lt;h2 id="well-get-started-at-2005">We&amp;rsquo;ll get started at 20:05&lt;/h2>
&lt;hr>

&lt;section data-noprocess data-shortcode-slide
 class="center">
 
&lt;h2 id="deserialization--prototype-pollution">deserialization &amp;amp;&amp;amp; prototype pollution&lt;/h2>
&lt;h3 id="6843-week5">6843 week5&lt;/h3>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h2 id="serialization">serialization&lt;/h2>
&lt;hr>
&lt;h3 id="what-is-serialization">what is serialization&lt;/h3>
&lt;ul>
&lt;li>converting an object&amp;rsquo;s state (data/structure) into a format that can be stored/transmitted.&lt;/li>
&lt;li>relatively straight-forward for simple types (e.g. strings, numbers), not so much others.&lt;/li>
&lt;li>all code is constantly serialized &amp;amp; stored in memory.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="can-anyone-think-of-examples-of-serialization">can anyone think of examples of serialization&lt;/h3>
&lt;ul>
&lt;li>writing data to files
&lt;ul>
&lt;li>csv&lt;/li>
&lt;li>json&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>storing stuff in a database&lt;/li>
&lt;li>sending data over a network&lt;/li>
&lt;li>a webserver receiving traffic&lt;/li>
&lt;li>protobufs!!1&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="is-this-exploitable">is this exploitable&lt;/h3>
&lt;ul>
&lt;li>not necessarily that dangerous&lt;/li>
&lt;li>this is control &amp;gt; data&lt;/li>
&lt;li>you&amp;rsquo;re turning structures into some format&lt;/li>
&lt;/ul>

&lt;/section>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h2 id="deserialization">deserialization&lt;/h2>
&lt;hr>
&lt;h3 id="what-is-it">what is it&lt;/h3>
&lt;ul>
&lt;li>as expected, the opposite of serialization&lt;/li>
&lt;li>turning serialized data (e.g. a string) back into code/data structures/objects&lt;/li>
&lt;li>this is data &amp;gt; control&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="type-confusion">type confusion&lt;/h3>
&lt;blockquote>
&lt;p>when a program misinterprets the type of data its being provided&lt;/p></description></item><item><title>x8: cs</title><link>/lectures/e8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/lectures/e8/</guid><description>&lt;h2 id="well-get-started-at-1805">We&amp;rsquo;ll get started at 18:05&lt;/h2>
&lt;hr>

&lt;section data-noprocess data-shortcode-slide
 class="center">
 
&lt;h2 id="client-side-attacks">client side attacks&lt;/h2>
&lt;h3 id="6843-week8">6843 week8&lt;/h3>
&lt;hr>
&lt;h3 id="overview">overview&lt;/h3>
&lt;ul>
&lt;li>how do browsers work?&lt;/li>
&lt;li>how can we exploit this
&lt;ul>
&lt;li>mutation xss&lt;/li>
&lt;li>dom clobbering&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>client-side js exploitation&lt;/li>
&lt;/ul>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h3 id="how-do-browsers-work">how do browsers work&lt;/h3>
&lt;p>they render html, css, and js into the DOM&lt;/p>
&lt;ul>
&lt;li>you can think of them kinda like an interpreters&lt;/li>
&lt;li>or a couple of interpreters (js + html parser)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>read more &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">here&lt;/a>&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h3 id="syntax-errors">syntax errors&lt;/h3>
&lt;p>what happens when a brower receives invalidly formatted content (js, html, css)?&lt;/p></description></item></channel></rss>